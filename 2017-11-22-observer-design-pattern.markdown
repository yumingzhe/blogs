---
layout: post
title: "observer design pattern"
date: 2017-11-22 23:04:07 +0800
comments: true
categories: 
---
观察者模式是一种常见的行为模式，主要的用途就是希望**系统在发生某种事件通知某些对事件感兴趣的对象**，这些对象接收到消息后可以做出相应的响应，通过使用观察者方式，消息通知几乎没有滞后性，接收者可以立即进行处理。观察者模式在我们的生活中也很常见，例如无线电广播，电台发出信号，对电台感兴趣的人们会将收音机调到电台的频率来接收信号；
更显而易见的例子要数订阅杂志了，假如我们对某个刊物感兴趣，那么我们就可以到邮件去交钱并注册一下我们的邮寄地址，等到报刊发表的时候就会邮寄给我们，当我们不再想要订阅的时候，去邮局取消订阅，那么我们就再不会接收到报刊了，但是出版社仍然会向其他订阅者继续发刊，只是我们不再接收到罢了。

上面的例子中隐含着一个发送和接收的模型，因此观察者模式也称为“发布-订阅”模式。系统中存在一到多个订阅者，它们接收来自于某个发布者的消息或通知，当发布者有新消息时，它会将消息传达给每个订阅者，因此观察者模式是一种**一对多的通讯模式**。

观察者模式定义了一种对象间一对多的依赖关系，当“一”的一方的对象状态改变时，"多"的一方就会收到通知。观察者模式中有 4 个角色：

* Subject(主题)。主题就是一个发布者，类似于邮局的作用，用来注册或注销观察者（或订阅者）
* Observer(观察者)。一个接口，当主题的状态发生变化时，主题调用此接口的 update() 方法来发布通知，任何想称为观察者的对象都应该实现该接口。
* ConcreteSubject。是主题接口的具体实现类，内部存储对该主题感兴趣的具体的观察者对象，当主题状态发生变化时，会调用 notifyObservers() 方法来通知每个观察者对象。
* ConcreteObserver。是观察者接口的具体实现类，内部维护着对具体主题对象的引用。

其 UML 图如下所示：

从上图可以看出
